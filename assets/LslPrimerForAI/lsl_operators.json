{
  "name": "operators",
  "id": "operators",
  "description": "Overview of all available LSL operators, categorized by type, used for calculations, comparisons, and control flow",
  "details": {
    "purpose": "To enable AI to use LSL operators correctly in expressions, with type-specific interactions detailed in the types file",
    "operator_categories": [
      {
        "name": "arithmetic",
        "operators": [
          "+",
          "-",
          "*",
          "/",
          "%"
        ],
        "description": "Perform mathematical operations like addition, subtraction, multiplication, division, and modulus. Unary '-' negates a value"
      },
      {
        "name": "bitwise",
        "operators": [
          "&",
          "|",
          "^",
          "~",
          "<<",
          ">>"
        ],
        "description": "Manipulate integer bits with AND, OR, XOR, NOT, left shift, and right shift operations"
      },
      {
        "name": "boolean_logical",
        "operators": [
          "&&",
          "||",
          "!"
        ],
        "description": "Evaluate logical conditions with AND, OR, and NOT for control flow and decision-making"
      },
      {
        "name": "comparison",
        "operators": [
          "==",
          "!=",
          "<",
          ">",
          "<=",
          ">="
        ],
        "description": "Compare values to determine equality, inequality, or relative order, used in conditional statements"
      },
      {
        "name": "assignment",
        "operators": [
          "=",
          "+=",
          "-=",
          "*=",
          "/=",
          "%="
        ],
        "description": "Assign values to variables or modify them with compound operations (e.g., increment by value)"
      },
      {
        "name": "other",
        "operators": [
          "()",
          "[]",
          ".",
          "++",
          "--"
        ],
        "description": "Control precedence (parentheses), access list elements (brackets), access vector/quaternion components (dot), or increment/decrement values"
      }
    ],
    "rules": {
      "description": "These operators are the only ones available in LSL. Type-specific interactions (e.g., '+' with strings vs. vectors) are detailed in the types file (lsl_type_keywords.json)",
      "recommendation": "Use parentheses to override operator precedence and ensure type compatibility"
    },
    "best_practices": [
      "Use parentheses to clarify operator precedence in complex expressions",
      "Verify operand types to avoid runtime errors, as detailed in the types file",
      "Use comparison and logical operators in event handlers for control flow",
      "Avoid overusing increment/decrement operators in complex expressions to maintain readability"
    ],
    "examples": [],
    "references": [
      {
        "url": "https://wiki.secondlife.com/wiki/LSL_Operators",
        "title": "LSL Wiki: LSL Operators"
      },
      {
        "url": "https://wiki.secondlife.com/wiki/Getting_started_with_LSL",
        "title": "LSL Wiki: Getting Started with LSL"
      },
      {
        "url": "https://wiki.secondlife.com/wiki/LSL_Portal",
        "title": "LSL Wiki: LSL Portal"
      }
    ]
  }
}

