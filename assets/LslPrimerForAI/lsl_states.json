{
  "name": "states",
  "id": "states",
  "description": "Explanation of how to define and use states in LSL to organize script behavior",
  "details": {
    "purpose": "To guide AI in structuring scripts with states to manage distinct behaviors, ensuring the mandatory 'default' state contains only event handlers",
    "state_mechanics": {
      "description": "States are defined with the 'state' keyword, starting with 'default'. Each state contains only top-level event handlers. Use 'state <state_name>' to transition between states, triggering the new state's 'state_entry' event. Only one state is active at a time",
      "recommendation": "Use a single state for simple scripts; add states only for significant behavioral changes"
    },
    "best_practices": [
      "Always include the 'default' state",
      "Minimize state transitions to reduce complexity",
      "Use 'state_entry' to initialize each state",
      "Ensure states contain only event handlers, with global declarations outside"
    ],
    "examples": [
      {
        "description": "Script with two states and state transition on touch",
        "code": "default\n{\n    state_entry()\n    {\n        llSay(0, \"Ready!\");\n    }\n    touch_start(integer total_number)\n    {\n        state busy;\n    }\n}\nstate busy\n{\n    state_entry()\n    {\n        llSay(0, \"Busy now!\");\n    }\n}",
        "context": "Shows a 'default' state transitioning to 'busy' state on touch, with each state having a 'state_entry' event"
      }
    ],
    "references": [
      {
        "url": "https://wiki.secondlife.com/wiki/Getting_started_with_LSL",
        "title": "LSL Wiki: Getting Started with LSL"
      },
      {
        "url": "https://wiki.secondlife.com/wiki/A_Basic_LSL_Tutorial",
        "title": "LSL Wiki: A Basic LSL Tutorial"
      }
    ]
  }
}

