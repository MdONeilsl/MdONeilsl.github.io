{
  "version": "1.6",
  "module": "lsl_coordinates",
  "description": "Second Life environment and context for LSL scripting, emphasizing efficient linkset operations from root prims using PRIM_LINK_TARGET, coordinate translations, and transformation evaluation",
  "last_updated": "2025-05-01",
  "concepts": [
    {
      "name": "coordinate_translation",
      "id": "coordinate_translation",
      "description": "Workflow for linkset operations, primarily from root prims, using llGetLinkPrimitiveParams with PRIM_LINK_TARGET to query multiple prims, translating coordinates to a universal system, evaluating transformations, and applying with llSetLinkPrimitiveParamsFast",
      "details": {
        "purpose": "To perform efficient linkset operations by querying root and child prim properties in a single llGetLinkPrimitiveParams call, translating to a universal coordinate system, evaluating transformations in the order: scale, rotation, position, and applying results",
        "script_context": {
          "description": "Most scripts run in the root prim (llGetLinkNumber() == 1) and manipulate child prims using llGetLinkPrimitiveParams and llSetLinkPrimitiveParamsFast. Child prim scripts are rare but supported",
          "recommendation": "Place scripts in the root prim and use PRIM_LINK_TARGET for efficient multi-prim queries"
        },
        "universal_systems": [
          {
            "name": "region_coordinates",
            "description": "Sim-based coordinates relative to the southwest corner (0,0,0). Default for sim-wide operations (e.g., movement, pathfinding)",
            "lsl_functions": [
              "llGetLinkPrimitiveParams(PRIM_POSITION)",
              "llGetObjectDetails(OBJECT_POS)"
            ]
          },
          {
            "name": "world_coordinates",
            "description": "Grid-wide coordinates for cross-region tasks. Derived from region coordinates + llGetRegionCorner",
            "lsl_functions": [
              "llGetRegionCorner"
            ]
          },
          {
            "name": "object_coordinates",
            "description": "Linkset-based coordinates relative to the root prim. Used for internal linkset adjustments",
            "lsl_functions": [
              "llGetLinkPrimitiveParams(PRIM_POS_LOCAL)"
            ]
          }
        ],
        "workflow": [
          {
            "step": "Choose universal coordinate system",
            "description": "Select region coordinates for sim-wide tasks, world coordinates for cross-region tasks, or object coordinates for linkset-internal tasks. Region coordinates are the default",
            "guidance": "Use region coordinates for most global operations"
          },
          {
            "step": "Identify script context",
            "description": "Use llGetLinkNumber() to confirm root prim (1) or child prim (>1). Assume root prim unless specified",
            "lsl_functions": [
              "llGetLinkNumber"
            ]
          },
          {
            "step": "Get source coordinates",
            "description": "Use llGetLinkPrimitiveParams with PRIM_LINK_TARGET to query child prim (PRIM_POS_LOCAL, PRIM_ROT_LOCAL, PRIM_SIZE) and root prim (PRIM_POSITION, PRIM_ROTATION) properties in one call. Parse with llList2Vector or llList2Rot. For external objects, use llGetObjectDetails(OBJECT_POS, OBJECT_ROT)",
            "lsl_functions": [
              "llGetLinkPrimitiveParams(PRIM_LINK_TARGET, LINK_ROOT)",
              "llGetObjectDetails",
              "llList2Vector",
              "llList2Rot"
            ]
          },
          {
            "step": "Translate to universal coordinates",
            "description": "Convert child prim local coordinates to the universal system. For region coordinates: global_pos = local_pos * root_rotation + root_position. For world coordinates: world_pos = global_pos + llGetRegionCorner()",
            "lsl_functions": [
              "llGetLinkPrimitiveParams(PRIM_POSITION, PRIM_ROTATION)",
              "llGetRegionCorner"
            ]
          },
          {
            "step": "Evaluate transformations",
            "description": "Calculate transformations in the universal system, evaluating in order: scale, rotation, position. Scale affects dimensions, rotation affects position frame, position depends on both",
            "lsl_functions": [
              "llGetLinkPrimitiveParams(PRIM_SIZE)"
            ]
          },
          {
            "step": "Translate back to target coordinates",
            "description": "Convert results to the target prim's coordinate system. For child prims: local_pos = (global_pos - root_position) / root_rotation",
            "lsl_functions": [
              "llSetLinkPrimitiveParamsFast(PRIM_POS_LOCAL, PRIM_ROT_LOCAL)"
            ]
          },
          {
            "step": "Apply transformations",
            "description": "Apply transformations using llSetLinkPrimitiveParamsFast. Parameter order is irrelevant, but values must be pre-evaluated correctly",
            "lsl_functions": [
              "llSetLinkPrimitiveParamsFast(PRIM_SIZE, PRIM_ROTATION, PRIM_ROT_LOCAL, PRIM_POSITION, PRIM_POS_LOCAL)"
            ]
          }
        ],
        "transformation_evaluation_order": {
          "description": "Transformations must be evaluated (calculated) in the order: scale, rotation, position to ensure correct results, regardless of application order in llSetLinkPrimitiveParamsFast",
          "steps": [
            {
              "operation": "scale",
              "description": "Evaluate size changes first, as they affect prim dimensions and subsequent calculations",
              "lsl_functions": [
                "llGetLinkPrimitiveParams(PRIM_SIZE)",
                "llList2Vector"
              ]
            },
            {
              "operation": "rotation",
              "description": "Evaluate rotation second, as it reorients the prim and affects position calculations",
              "lsl_functions": [
                "llGetLinkPrimitiveParams(PRIM_ROT_LOCAL, PRIM_ROTATION)",
                "llList2Rot"
              ]
            },
            {
              "operation": "position",
              "description": "Evaluate position last, as it depends on the scaled and rotated state",
              "lsl_functions": [
                "llGetLinkPrimitiveParams(PRIM_POS_LOCAL, PRIM_POSITION)",
                "llList2Vector"
              ]
            }
          ]
        }
      },
      "optimization_considerations": [
        {
          "issue": "Overusing llGetPos or separate llGetRootPosition/llGetRootRotation calls",
          "description": "llGetPos is limited to the script's prim, and separate llGetRootPosition/llGetRootRotation calls are less efficient. llGetLinkPrimitiveParams with PRIM_LINK_TARGET queries root and child prim properties in one call, parsed with llList2Vector or llList2Rot",
          "example": {
            "incorrect_code": "integer link = 2; vector local_pos = llGetPos(); vector root_pos = llGetRootPosition(); rotation root_rot = llGetRootRotation(); vector global_pos = local_pos * root_rot + root_pos; global_pos += <10.0, 0.0, 0.0>; vector new_local_pos = (global_pos - root_pos) / root_rot; llSetLinkPrimitiveParamsFast(link, [PRIM_POS_LOCAL, new_local_pos]);",
            "correct_code": "integer link = 2; list params = llGetLinkPrimitiveParams(link, [PRIM_POS_LOCAL, PRIM_LINK_TARGET, LINK_ROOT, PRIM_POSITION, PRIM_ROTATION]); vector local_pos = llList2Vector(params, 0); vector root_pos = llList2Vector(params, 1); rotation root_rot = llList2Rot(params, 2); vector global_pos = local_pos * root_rot + root_pos; global_pos += <10.0, 0.0, 0.0>; vector new_local_pos = (global_pos - root_pos) / root_rot; llSetLinkPrimitiveParamsFast(link, [PRIM_POS_LOCAL, new_local_pos]);",
            "context": "Use PRIM_LINK_TARGET to query root and child prims efficiently"
          },
          "when_to_use": {
            "llGetLinkPrimitiveParams": [
              "Querying root and child prim properties (position, rotation, scale) in one call",
              "Efficient linkset operations from root prim"
            ],
            "llGetPos": [
              "Quick access to root prim's region coordinates in simple scripts",
              "When script is confirmed in root and child prims are not involved"
            ]
          },
          "performance": {
            "llGetLinkPrimitiveParams": "Moderate overhead, but efficient for multi-prim queries with PRIM_LINK_TARGET",
            "llGetPos": "Lower overhead, but limited to script's prim",
            "recommendation": "Prioritize llGetLinkPrimitiveParams with PRIM_LINK_TARGET for linkset operations"
          }
        },
        {
          "issue": "Incorrect transformation evaluation order",
          "description": "Evaluating position before rotation or scale causes misalignment, as position depends on the rotated and scaled state",
          "example": {
            "incorrect_code": "integer link = 2; list params = llGetLinkPrimitiveParams(link, [PRIM_POS_LOCAL]); vector pos = llList2Vector(params, 0) + <10.0, 0.0, 0.0>; rotation rot = llEuler2Rot(<0.0, 0.0, 90.0> * DEG_TO_RAD); vector scale = <2.0, 2.0, 2.0>; // Evaluates position first",
            "correct_code": "integer link = 2; list params = llGetLinkPrimitiveParams(link, [PRIM_SIZE, PRIM_ROT_LOCAL, PRIM_POS_LOCAL, PRIM_LINK_TARGET, LINK_ROOT, PRIM_POSITION, PRIM_ROTATION]); vector new_scale = <2.0, 2.0, 2.0>; rotation new_rot = llEuler2Rot(<0.0, 0.0, 90.0> * DEG_TO_RAD); vector local_pos = llList2Vector(params, 2); vector root_pos = llList2Vector(params, 3); rotation root_rot = llList2Rot(params, 4); vector global_pos = local_pos * root_rot + root_pos; global_pos += <10.0, 0.0, 0.0>; vector new_local_pos = (global_pos - root_pos) / root_rot; llSetLinkPrimitiveParamsFast(link, [PRIM_SIZE, new_scale, PRIM_ROT_LOCAL, new_rot, PRIM_POS_LOCAL, new_local_pos]);",
            "context": "Evaluate scale, then rotation, then position; llSetLinkPrimitiveParamsFast order is irrelevant"
          }
        }
      ],
      "pitfalls": [
        {
          "issue": "Using llGetPos for child prim operations",
          "solution": "Use llGetLinkPrimitiveParams(PRIM_POS_LOCAL, PRIM_LINK_TARGET, LINK_ROOT) to query child and root prim properties, parsed with llList2Vector/llList2Rot",
          "source": "https://wiki.secondlife.com/wiki/LlGetLinkPrimitiveParams"
        },
        {
          "issue": "Choosing incorrect universal coordinate system",
          "solution": "Select region coordinates for sim-wide tasks, world coordinates for cross-region tasks, or object coordinates for linkset-internal tasks",
          "source": "https://wiki.secondlife.com/wiki/User:Timmy_Foxclaw/About_Coordinate_Systems_and_Rotations"
        },
        {
          "issue": "Evaluating transformations in wrong order",
          "solution": "Evaluate scale, then rotation, then position before passing to llSetLinkPrimitiveParamsFast",
          "source": "https://wiki.secondlife.com/wiki/LlSetLinkPrimitiveParamsFast"
        },
        {
          "issue": "Inefficient separate queries for root prim properties",
          "solution": "Use PRIM_LINK_TARGET with LINK_ROOT in llGetLinkPrimitiveParams to query root and child prims in one call",
          "source": "https://wiki.secondlife.com/wiki/PRIM_LINK_TARGET"
        }
      ],
      "best_practices": [
        "Place scripts in the root prim and use llGetLinkPrimitiveParams with PRIM_LINK_TARGET and LINK_ROOT for efficient multi-prim queries",
        "Choose the universal coordinate system based on the task (region for sim-wide, world for cross-region, object for linkset-internal)",
        "Translate coordinates to the universal system before evaluating transformations",
        "Evaluate transformations in order: scale, rotation, position",
        "Use llList2Vector and llList2Rot to parse llGetLinkPrimitiveParams and llGetObjectDetails outputs",
        "Apply transformations with llSetLinkPrimitiveParamsFast, noting parameter order is irrelevant",
        "Verify script context with llGetLinkNumber(), but assume root prim unless specified",
        "Document coordinate system and transformation evaluation assumptions"
      ],
      "examples": [
        {
          "description": "Move a child prim 10 meters east in region coordinates from root prim",
          "code": "integer link = 2; list params = llGetLinkPrimitiveParams(link, [PRIM_POS_LOCAL, PRIM_LINK_TARGET, LINK_ROOT, PRIM_POSITION, PRIM_ROTATION]); vector local_pos = llList2Vector(params, 0); vector root_pos = llList2Vector(params, 1); rotation root_rot = llList2Rot(params, 2); vector global_pos = local_pos * root_rot + root_pos; global_pos += <10.0, 0.0, 0.0>; vector new_local_pos = (global_pos - root_pos) / root_rot; llSetLinkPrimitiveParamsFast(link, [PRIM_POS_LOCAL, new_local_pos]);",
          "context": "Uses PRIM_LINK_TARGET to query child and root prims, translates to region coordinates, evaluates position"
        },
        {
          "description": "Scale, rotate, and reposition a child prim in region coordinates from root prim",
          "code": "integer link = 2; list params = llGetLinkPrimitiveParams(link, [PRIM_SIZE, PRIM_ROT_LOCAL, PRIM_POS_LOCAL, PRIM_LINK_TARGET, LINK_ROOT, PRIM_POSITION, PRIM_ROTATION]); vector new_scale = <2.0, 2.0, 2.0>; rotation new_rot = llEuler2Rot(<0.0, 0.0, 90.0> * DEG_TO_RAD); vector local_pos = llList2Vector(params, 2); vector root_pos = llList2Vector(params, 3); rotation root_rot = llList2Rot(params, 4); vector global_pos = local_pos * root_rot + root_pos; global_pos += <10.0, 0.0, 0.0>; vector new_local_pos = (global_pos - root_pos) / root_rot; llSetLinkPrimitiveParamsFast(link, [PRIM_SIZE, new_scale, PRIM_ROT_LOCAL, new_rot, PRIM_POS_LOCAL, new_local_pos]);",
          "context": "Uses PRIM_LINK_TARGET, evaluates scale, rotation, position in region coordinates"
        },
        {
          "description": "Position an external object in world coordinates",
          "code": "key object_id = \"some_uuid\"; list details = llGetObjectDetails(object_id, [OBJECT_POS, OBJECT_ROT]); vector global_pos = llList2Vector(details, 0); rotation global_rot = llList2Rot(details, 1); vector world_pos = global_pos + llGetRegionCorner(); world_pos += <100.0, 0.0, 0.0>; vector new_global_pos = world_pos - llGetRegionCorner(); llSetLinkPrimitiveParamsFast(1, [PRIM_POSITION, new_global_pos]);",
          "context": "Uses llGetObjectDetails with llList2Vector/llList2Rot, translates to world coordinates"
        }
      ],
      "references": [
        {
          "url": "https://wiki.secondlife.com/wiki/User:Timmy_Foxclaw/About_Coordinate_Systems_and_Rotations",
          "title": "Timmy Foxclaw: About Coordinate Systems and Rotations"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LlGetRegionCorner",
          "title": "LSL Wiki: llGetRegionCorner"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LlGetPos",
          "title": "LSL Wiki: llGetPos"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LlGetRot",
          "title": "LSL Wiki: llGetRot"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LlGetLocalPos",
          "title": "LSL Wiki: llGetLocalPos"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LlGetLocalRot",
          "title": "LSL Wiki: llGetLocalRot"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LlGetRootPosition",
          "title": "LSL Wiki: llGetRootPosition"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LlGetRootRotation",
          "title": "LSL Wiki: llGetRootRotation"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LlGetScale",
          "title": "LSL Wiki: llGetScale"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LlGetPrimitiveParams#llGetLinkPrimitiveParams",
          "title": "LSL Wiki: llGetLinkPrimitiveParams"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LlSetPrimitiveParams#llSetLinkPrimitiveParamsFast",
          "title": "LSL Wiki: llSetLinkPrimitiveParamsFast"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/PRIM_POSITION",
          "title": "LSL Wiki: PRIM_POSITION"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/PRIM_POS_LOCAL",
          "title": "LSL Wiki: PRIM_POS_LOCAL"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/PRIM_ROTATION",
          "title": "LSL Wiki: PRIM_ROTATION"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/PRIM_ROT_LOCAL",
          "title": "LSL Wiki: PRIM_ROT_LOCAL"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/PRIM_SIZE",
          "title": "LSL Wiki: PRIM_SIZE"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LlGetObjectDetails",
          "title": "LSL Wiki: llGetObjectDetails"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/OBJECT_POS",
          "title": "LSL Wiki: OBJECT_POS"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/OBJECT_ROT",
          "title": "LSL Wiki: OBJECT_ROT"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LlList2Vector",
          "title": "LSL Wiki: llList2Vector"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LlList2Rot",
          "title": "LSL Wiki: llList2Rot"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/PRIM_LINK_TARGET",
          "title": "LSL Wiki: PRIM_LINK_TARGET"
        },
        {
          "url": "https://wiki.secondlife.com/wiki/LINK_ROOT",
          "title": "LSL Wiki: LINK_ROOT"
        }
      ]
    }
  ]
}

