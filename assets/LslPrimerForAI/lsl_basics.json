{
  "version": "1.16",
  "module": "lsl_basics",
  "description": "Foundational elements of Linden Scripting Language (LSL) for Second Life, covering script structure, keywords, operators, states, events, wiki search, data types, flow control, user-defined entities, constants, pre-defined functions, and efficiency to guide AI in generating correct and idiomatic LSL code. LSL is a strongly typed language, requiring explicit type declarations for variables and function parameters, with type mismatches causing compilation errors",
  "last_updated": "2025-05-03",
  "concepts": [
    {
      "name": "wiki_search",
      "id": "wiki_search",
      "reference_file": "lsl_wiki_search.json",
      "description": "Guide to searching the Second Life LSL Wiki for keyword-specific information using a standardized URL syntax"
    },
    {
      "name": "script_structure",
      "id": "script_structure",
      "reference_file": "lsl_script_structure.json",
      "description": "Overview of the basic structure of an LSL script, comprising global declarations followed by states with event handlers"
    },
    {
      "name": "keywords",
      "id": "keywords",
      "reference_file": "lsl_keywords.json",
      "description": "Explanation of LSL keyword categories (State, Events, Types, Constants, Flow Control, Functions), which are reserved and cannot be used as identifiers"
    },
    {
      "name": "states",
      "id": "states",
      "reference_file": "lsl_states.json",
      "description": "Explanation of how to define and use states in LSL to organize script behavior"
    },
    {
      "name": "events",
      "id": "events",
      "reference_file": "lsl_events.json",
      "description": "Complete list of all LSL events, which are fixed handlers defined only within states to drive interactivity"
    },
    {
      "name": "types",
      "id": "types",
      "reference_file": "lsl_types.json",
      "description": "Overview of LSL data types, which define the format of data in variables and function parameters, enforcing strong typing"
    },
    {
      "name": "constants",
      "id": "constants",
      "reference_file": "lsl_constants.json",
      "description": "Overview of LSL pre-defined constants, which provide fixed values for consistent script behavior"
    },
    {
      "name": "llfunctions",
      "id": "llfunctions",
      "reference_file": "lsl_llfunctions.json",
      "description": "Overview of LSL pre-defined functions, which provide built-in functionality for script operations"
    },
    {
      "name": "operators",
      "id": "operators",
      "reference_file": "lsl_operators.json",
      "description": "Overview of all available LSL operators, categorized by type, used for calculations, comparisons, and control flow"
    },
    {
      "name": "flow_control",
      "id": "flow_control",
      "reference_file": "lsl_flow_control.json",
      "description": "Overview of LSL flow control constructs, which manage the execution order of script logic using conditional statements, loops, jumps, and state transitions"
    },
    {
      "name": "user_defined_entities",
      "id": "user_defined_entities",
      "reference_file": "lsl_user_defined_entities.json",
      "description": "Overview of user-defined variables and functions in LSL, including declaration, scope, and usage for custom logic"
    },
    {
      "name": "efficiency",
      "id": "efficiency",
      "reference_file": "lsl_efficiency.json",
      "description": "Overview of techniques to optimize LSL scripts for execution speed and memory efficiency"
    }
  ]
}

