{
  "name": "flow_control",
  "id": "flow_control",
  "description": "Overview of LSL flow control constructs, which manage the execution order of script logic using conditional statements, loops, jumps, and state transitions",
  "details": {
    "purpose": "To guide AI in using LSL’s flow control keywords to structure script execution, ensuring logical and efficient control flow within event handlers and functions",
    "flow_control_mechanics": {
      "description": "LSL flow control is managed by reserved keywords that direct script execution. Conditional statements ('if', 'else') evaluate boolean expressions to execute code blocks. Loops ('for', 'while', 'do') enable iterative execution based on conditions. The 'return' statement exits functions, optionally returning a value, while 'jump' redirects execution to a labeled point in the same scope (similar to goto). The 'state' keyword transitions between states, triggering the new state’s 'state_entry' event and halting the current state’s execution. All types are immutable, changed only via assignment operators (=, +=, -=, *=, /=, %=, ++, --), and function parameters are passed by value, ensuring no side effects outside the function scope. Flow control keywords are case-sensitive and cannot be used as identifiers",
      "recommendation": "Use conditionals and loops for event-driven logic, 'state' for behavioral shifts, and avoid 'jump' unless necessary for complex control flow"
    },
    "all_flow_control_keywords": [
      {
        "name": "if",
        "description": "Executes a code block if a boolean expression is true"
      },
      {
        "name": "else",
        "description": "Executes a code block if the preceding 'if' condition is false"
      },
      {
        "name": "for",
        "description": "Iterates a code block with an initialization, condition, and increment expression"
      },
      {
        "name": "while",
        "description": "Iterates a code block while a boolean condition is true"
      },
      {
        "name": "do",
        "description": "Executes a code block at least once, iterating while a condition is true"
      },
      {
        "name": "return",
        "description": "Exits a function, optionally returning a value"
      },
      {
        "name": "jump",
        "description": "Redirects execution to a labeled point in the same scope"
      },
      {
        "name": "state",
        "description": "Transitions to a named state, triggering its 'state_entry' event"
      }
    ],
    "best_practices": [
      "Use 'if-else' for clear decision-making in event handlers",
      "Prefer 'for' or 'while' over 'jump' for iteration to maintain readability",
      "Minimize nested conditionals and loops to reduce complexity",
      "Use 'state' transitions for significant behavioral changes, not minor logic",
      "Avoid 'jump' unless essential, as it can obscure control flow",
      "Ensure boolean expressions in conditionals and loops are type-compatible",
      "Leverage immutability by reassigning variables explicitly in flow control"
    ],
    "examples": [
      {
        "description": "Conditional logic in an event handler",
        "code": "default\n{\n    touch_start(integer num_detected)\n    {\n        if (num_detected > 0)\n        {\n            llSay(0, \"Touched by \" + llDetectedName(0));\n        }\n        else\n        {\n            llSay(0, \"No touch detected\");\n        }\n    }\n}",
        "context": "Uses 'if-else' to handle touch events based on the number of detected avatars"
      },
      {
        "description": "State transition with a loop",
        "code": "default\n{\n    state_entry()\n    {\n        integer i;\n        for (i = 0; i < 3; ++i)\n        {\n            llSay(0, \"Counting: \" + (string)i);\n        }\n        state active;\n    }\n}\nstate active\n{\n    state_entry()\n    {\n        llSay(0, \"Active state entered\");\n    }\n}",
        "context": "Uses a 'for' loop to count, then transitions to 'active' state with 'state'"
      }
    ],
    "references": [
      {
        "url": "https://wiki.secondlife.com/wiki/Category:LSL_Flow_Control",
        "title": "LSL Wiki: LSL Flow Control Category"
      },
      {
        "url": "https://wiki.secondlife.com/wiki/LSL_Operators",
        "title": "LSL Wiki: LSL Operators"
      },
      {
        "url": "https://wiki.secondlife.com/wiki/LSL_Portal",
        "title": "LSL Wiki: LSL Portal"
      }
    ]
  }
}

