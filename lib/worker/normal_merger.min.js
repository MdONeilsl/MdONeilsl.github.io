import{merge_normal_array}from"../module/image.js";import{GPGPU}from"../class/gpgpu.js";let vs_source=``,fs_source=``;const load_shader_source=async a=>{const b=await fetch(a,{cache:"no-store",priority:"high"});return b.text()},gpu_mrg=(a,b,c,d,e,f)=>{try{a.setup_program(vs_source,fs_source,"position"),a.prog.use();const g=a.create_texture("base_tex",0,b,e,f),h=a.create_texture("add_tex",1,c,e,f),i=a.create_texture("mask_tex",2,d,e,f);a.create_texture("dest_tex",3,null,e,f),a.setup_frame("dest_tex"),g.activate(),h.activate(),i.activate(),a.prog.set("base_tex",0),a.prog.set("add_tex",1),a.prog.set("mask_tex",2),a.prog.set("y_sign",1);const j=a.glexec(e,f);return a.clear_frame(),j}catch(a){throw console.error("gpu execution error:",a),a}};self.onmessage=async a=>{if(`test`==a.data)return void self.postMessage(a.data);const{base_data:b,add_data:c,mask_data:d,width:e,height:f}=a.data;[vs_source,fs_source]=await Promise.all([load_shader_source(`../shaders/normal_merger.vert`),load_shader_source(`../shaders/normal_merger.frag`)]);let g=new Uint8ClampedArray(4*(e*f));const h=new GPGPU(e,f);try{if(h.gl)g=h.exec(gpu_mrg,b,c,d,e,f);else throw new Error("WebGL not available")}catch(a){console.warn("GPU mergin failed, falling back to CPU:",a.message),merge_normal_array(b,c,d,e,f,g)}const i=g.slice(0,4*(e*f));h.clear(),self.postMessage({result:i},[i.buffer])};