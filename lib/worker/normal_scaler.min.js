import{GPGPU}from"../class/gpgpu.js";import{scale_normal_array}from"../module/image.js";let vs_source=``,fs_source=``;const load_shader_source=async a=>{const b=await fetch(a,{cache:"no-store",priority:"high"});return b.text()},gpuscl=(a,b,c,d,e,f)=>{try{a.setup_program(vs_source,fs_source,"position"),a.prog.use();const g=a.create_texture("source_tex",0,b,c,d);a.create_texture("dest_tex",1,null,e,f),a.setup_frame("dest_tex"),g.activate(),a.prog.set("source_tex",0),a.prog.set("source_size",c,d),a.prog.set("target_size",e,f);const h=a.glexec(e,f);return a.clear_frame(),h}catch(b){throw a.clear(),console.error("GPU execution error:",b),b}},next_step_size=(a,b,c,d)=>{const e=(a,b)=>{if(a===b)return b;if(a<b){const c=Math.floor(a<<1);return c<=b?c:b}else{const c=Math.floor(a>>1);return c>=b?c:b}};return[e(a,c),e(b,d)]};self.onmessage=async a=>{if("test"===a.data)return void self.postMessage("test");const{src:b,width:c,height:d,target_width:e,target_height:f}=a.data;if(!(b instanceof Uint8ClampedArray)||b.length!==4*(c*d)||!Number.isInteger(c)||0>=c||!Number.isInteger(d)||0>=d||!Number.isInteger(e)||0>=e||!Number.isInteger(f)||0>=f)return void self.postMessage({error:`Invalid input parameters or data size mismatch`,result:b},[b.buffer]);let g=b,h=c,i=d;[vs_source,fs_source]=await Promise.all([load_shader_source(`../shaders/min.vert`),load_shader_source(`../shaders/normal_scaler.frag`)]);const j=Math.max(c,e),k=Math.max(d,f),l=new GPGPU(j,k);for(let b=new Uint8ClampedArray(4*(j*k));h!==e||i!==f;){const[a,c]=next_step_size(h,i,e,f);try{if(l.gl)b=l.exec(gpuscl,g,h,i,a,c);else throw new Error("WebGL not available")}catch(d){console.warn("GPU scaling failed, falling back to CPU:",d.message),b=scale_normal_array(g,h,i,a,c)}g=b.slice(0,4*(a*c)),h=a,i=c}l.clear(),self.postMessage({error:null,result:g},[g.buffer])};